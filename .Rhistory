library(ggplot2)
library(MASS)
library(dplyr)
library(stringr)
library(readr)
library(e1071)
library(caret)
library(DMwR2)
library(rpart)
library(randomForest)
library(performanceEstimation)
adult_dataset <- read.csv(file = "adult.data", header = F)
head(adult_dataset)
text <- read_lines("old.adult.names")
text <- text[64:78]
text[1:3]
nms <- str_split_fixed(text,":",2)[,1]
nms[1:3]
nms <- str_trim(nms)
nms[1:3]
nms <- str_replace_all(nms, "[^[:alnum:]]", "")
nms[1:3]
colnames(adult_dataset) <- c(nms)
head(adult_dataset)
str(adult_dataset)
sapply(adult_dataset, function(x) n_distinct(x))
sum(is.na(adult_dataset))
adult_dataset[sapply(adult_dataset, is.character)] <- lapply(adult_dataset[sapply(adult_dataset, is.character)], stringr::str_trim)
unique(adult_dataset$nativecountry)
unique(adult_dataset$occupation)
unique(adult_dataset$workclass)
adult_dataset[adult_dataset == "?"] <- NA
unique(adult_dataset$workclass)
sum(is.na(adult_dataset))
table(adult_dataset['class'])
boxplot.stats(adult_dataset$age)$out
adult_dataset <- adult_dataset %>% filter(age <= 79)
adult_dataset <- subset(adult_dataset, select = -fnlwgt)
dim(adult_dataset)
adult_dataset[sapply(adult_dataset, is.character)] <- lapply(adult_dataset[sapply(adult_dataset, is.character)], as.factor)
str(adult_dataset)
levels(adult_dataset$nativecountry)
adult_dataset$nativecountry <- as.character(adult_dataset$nativecountry)
adult_dataset$nativecountry <- ifelse(adult_dataset$nativecountry == "United-States","United-States", "other_countres")
adult_dataset$nativecountry <- as.factor(adult_dataset$nativecountry)
levels(adult_dataset$nativecountry)
sample_dataset <- adult_dataset
dim(sample_dataset)
set.seed(123)
belowtarget <- sample_dataset %>% filter(class == "<=50K")
abovetarget <- sample_dataset %>% filter(class == ">50K")
#create a sample data set with 10% of each data set
belowtargetsample <- sample(1:nrow(belowtarget), 0.1*nrow(belowtarget))
abovetargetsample <- sample(1:nrow(abovetarget), 0.1*nrow(abovetarget))
sample1 <- belowtarget[belowtargetsample,]
sample2 <- abovetarget[abovetargetsample,]
data_sample <- rbind(sample1, sample2)
head(data_sample)
table(data_sample$class)
ggplot(data = data_sample, mapping = aes(x = class)) + geom_bar()
res2 <- performanceEstimation(
PredTask(class ~., data_sample),
c(workflowVariants("standardWF",
pre = "knnImp",
learner = "randomForest",
# test all combinations of the given values for ntree and mtry
learner.pars = list(ntree = 500, mtry = c(3:8)),
# keep 'pre' parameters fixed for all variants
as.is = "pre"),
workflowVariants("standardWF",
pre = "knnImp",
learner="rpart",
learner.pars=list(cp = 0, minsplit=c(1:4)), predictor.pars=list(type="class"),
as.is = "pre"),
workflowVariants("standardWF",
pre = "knnImp",
learner="svm",
learner.pars=list(cost =c(0.05:2), gamma = c(0.05:2)),
as.is = "pre")),
EstimationTask(metrics = c("err", "prec", "rec", "F"),
# need to provide positive class so classificationMetrics()
# which is the default evaluator can calculate prec, rec, and F
evaluator.pars = list(posClass = "<=50K"),
method = CV(nReps = 5, nFolds = 5, strat = TRUE)))
plot(res2)
library(ggplot2)
library(MASS)
library(dplyr)
library(stringr)
library(readr)
library(e1071)
library(caret)
library(DMwR2)
library(rpart)
library(randomForest)
library(performanceEstimation)
adult_dataset <- read.csv(file = "adult.data", header = F)
head(adult_dataset)
text <- read_lines("old.adult.names")
text <- text[64:78]
text[1:3]
nms <- str_split_fixed(text,":",2)[,1]
nms[1:3]
nms <- str_trim(nms)
nms[1:3]
nms <- str_replace_all(nms, "[^[:alnum:]]", "")
nms[1:3]
colnames(adult_dataset) <- c(nms)
head(adult_dataset)
str(adult_dataset)
sapply(adult_dataset, function(x) n_distinct(x))
sum(is.na(adult_dataset))
adult_dataset[sapply(adult_dataset, is.character)] <- lapply(adult_dataset[sapply(adult_dataset, is.character)], stringr::str_trim)
unique(adult_dataset$nativecountry)
unique(adult_dataset$occupation)
unique(adult_dataset$workclass)
adult_dataset[adult_dataset == "?"] <- NA
unique(adult_dataset$workclass)
sum(is.na(adult_dataset))
table(adult_dataset['class'])
boxplot.stats(adult_dataset$age)$out
adult_dataset <- adult_dataset %>% filter(age <= 79)
adult_dataset <- subset(adult_dataset, select = -fnlwgt)
dim(adult_dataset)
adult_dataset[sapply(adult_dataset, is.character)] <- lapply(adult_dataset[sapply(adult_dataset, is.character)], as.factor)
str(adult_dataset)
levels(adult_dataset$nativecountry)
adult_dataset$nativecountry <- as.character(adult_dataset$nativecountry)
adult_dataset$nativecountry <- ifelse(adult_dataset$nativecountry == "United-States","United-States", "other_countres")
adult_dataset$nativecountry <- as.factor(adult_dataset$nativecountry)
levels(adult_dataset$nativecountry)
sample_dataset <- adult_dataset
dim(sample_dataset)
set.seed(123)
belowtarget <- sample_dataset %>% filter(class == "<=50K")
abovetarget <- sample_dataset %>% filter(class == ">50K")
#create a sample data set with 10% of each data set
belowtargetsample <- sample(1:nrow(belowtarget), 0.1*nrow(belowtarget))
abovetargetsample <- sample(1:nrow(abovetarget), 0.1*nrow(abovetarget))
sample1 <- belowtarget[belowtargetsample,]
sample2 <- abovetarget[abovetargetsample,]
data_sample <- rbind(sample1, sample2)
head(data_sample)
table(data_sample$class)
ggplot(data = data_sample, mapping = aes(x = class)) + geom_bar()
res2 <- performanceEstimation(
PredTask(class ~., data_sample),
c(workflowVariants("standardWF",
pre = "knnImp",
learner = "randomForest",
# test all combinations of the given values for ntree and mtry
learner.pars = list(ntree = 500, mtry = c(4,7)),
# keep 'pre' parameters fixed for all variants
as.is = "pre"),
workflowVariants("standardWF",
pre = "knnImp",
learner="rpart",
learner.pars=list(cp = 0, minsplit=c(1:4)), predictor.pars=list(type="class"),
as.is = "pre"),
workflowVariants("standardWF",
pre = "knnImp",
learner="svm",
learner.pars=list(cost =c(0.05:2), gamma = c(0.05:2)),
as.is = "pre")),
EstimationTask(metrics = c("err", "prec", "rec", "F"),
# need to provide positive class so classificationMetrics()
# which is the default evaluator can calculate prec, rec, and F
evaluator.pars = list(posClass = "<=50K"),
method = CV(nReps = 2, nFolds = 5, strat = TRUE)))
plot(res2)
topPerformers(res2, maxs = c(F, rep(T, 3)))
winWF2 <- getWorkflow("randomForest.v1", res2)
winWF2
winWF3 <- getWorkflow("svm.v2", res2)
winWF3
winWF4 <- getWorkflow("rpart.v1", res2)
winWF4
summary(res2$data_sample.class$randomForest.v1)
pres2 <- pairedComparisons(res2, maxs = c(F, rep(T, 3)), baseline = "randomForest.v1")
pres2$F$WilcoxonSignedRank.test
p <- pres2
signifDiffs(p, p.limit=0.01)$F$WilcoxonSignedRank.test
library(rpart.plot)
nopostpruningmodel <- rpart(class~ .,data_sample, cp = 0, minsplit = 1)
rpart.plot(nopostpruningmodel)
head(nopostpruningmodel$variable.importance, 2)
summary(res2)
summary(res2)
res2 <- performanceEstimation(
PredTask(class ~., data_sample),
c(workflowVariants("standardWF",
pre = "knnImp",
learner = "randomForest",
# test all combinations of the given values for ntree and mtry
learner.pars = list(ntree = 500, mtry = 4:7),
# keep 'pre' parameters fixed for all variants
as.is = "pre"),
workflowVariants("standardWF",
pre = "knnImp",
learner="rpart",
learner.pars=list(cp = 0, minsplit=1:4), predictor.pars=list(type="class"),
as.is = "pre"),
workflowVariants("standardWF",
pre = "knnImp",
learner="svm",
learner.pars=list(cost =0.5:3, gamma = 0.5:3),
as.is = "pre")),
EstimationTask(metrics = c("err", "prec", "rec", "F"),
# need to provide positive class so classificationMetrics()
# which is the default evaluator can calculate prec, rec, and F
evaluator.pars = list(posClass = "<=50K"),
method = CV(nReps = 2, nFolds = 5, strat = TRUE)))
summary(res2)
plot(res2)
topPerformers(res2, maxs = c(F, rep(T, 3)))
winWF2 <- getWorkflow("svm.v2", res2)
winWF2
winWF3 <- getWorkflow("randomForest.v1", res2)
winWF3
winWF4 <- getWorkflow("rpart.v1", res2)
winWF4
summary(res2$data_sample.class$svm.v2)
pres2 <- pairedComparisons(res2, maxs = c(F, rep(T, 3)), baseline = "svm.v2")
pres2$F$WilcoxonSignedRank.test
p <- pres2
signifDiffs(p, p.limit=0.01)$F$WilcoxonSignedRank.test
res2 <- performanceEstimation(
PredTask(class ~., data_sample),
c(workflowVariants("standardWF",
pre = "knnImp",
learner = "randomForest",
# test all combinations of the given values for ntree and mtry
learner.pars = list(ntree = 500, mtry = 4:7),
# keep 'pre' parameters fixed for all variants
as.is = "pre"),
workflowVariants("standardWF",
pre = "knnImp",
learner="rpart",
learner.pars=list(cp = 0, minsplit=1:4), predictor.pars=list(type="class"),
as.is = "pre"),
workflowVariants("standardWF",
pre = "knnImp",
learner="svm",
learner.pars=list(cost =0.5:2, gamma = c(0.5,1)),
as.is = "pre")),
EstimationTask(metrics = c("err", "prec", "rec", "F"),
# need to provide positive class so classificationMetrics()
# which is the default evaluator can calculate prec, rec, and F
evaluator.pars = list(posClass = "<=50K"),
method = CV(nReps = 2, nFolds = 5, strat = TRUE)))
summary(res2)
plot(res2)
topPerformers(res2, maxs = c(F, rep(T, 3)))
summary(res2$data_sample.class$randomForest.v1)
pres2 <- pairedComparisons(res2, maxs = c(F, rep(T, 3)), baseline = "randomForest.v1")
pres2$F$WilcoxonSignedRank.test
p <- pres2
signifDiffs(p, p.limit=0.01)$F$WilcoxonSignedRank.test
rankWorkflows(res2, 3)
rankWorkflows(res2, 16)
rankWorkflows(res2, 10)
rankWorkflows(res2, 6)
topPerformers(res2)
winWF2 <- getWorkflow("svm.v2", res2)
winWF2
winWF3 <- getWorkflow("randomForest.v1", res2)
winWF3
winWF4 <- getWorkflow("rpart.v3", res2)
winWF4
summary(res2$data_sample.class$randomForest.v1)
pres2 <- pairedComparisons(res2, maxs = c(F, rep(T, 3)), baseline = "randomForest.v1")
pres2$F$WilcoxonSignedRank.test
# Create random forest
# For classification
tree_model <- randomForest(class ~ ., data = data_sample, importance = TRUE,proximity = TRUE)
summary(data_sample)
data_sample <- KNN(data_sample)
library(VIM)
install.packages("VIM")
install.packages("VIM")
library(VIM)
data_sample <- KNN(data_sample)
library(VIM)
data_sample <- knnImp(data_sample)
data_sample <- knnImp(data_sample)
# Create random forest
# For classification
tree_model <- randomForest(class ~ ., data = data_sample, ntree=500, mtry = 4, importance = TRUE,proximity = TRUE)
# Create random forest
# For classification
library(randomForest)
tree_model <- randomForest(class ~ ., data = data_sample, ntree=500, mtry = 4, importance = TRUE,proximity = TRUE)
summary(data_sample)
head(tree_model$variable.importance, 2)
print(tree_model)
importance(tree_model)
# Create random forest
# For classification
library(randomForest)
tree_model <- randomForest(class ~ ., data = data_sample, ntree=500, mtry = 4, importance = TRUE,proximity = TRUE)
tree_model
plot(tree_model)
importance(tree_model)
varImpPlot(tree_model)
# Create random forest
# For classification
library(randomForest)
tree_model <- randomForest(class ~ ., data = data_sample, ntree=500, mtry = 4, importance = TRUE,proximity = TRUE)
tree_model
plot(tree_model)
importance(tree_model)
varImpPlot(tree_model)
library(ggplot2)
library(MASS)
library(dplyr)
library(stringr)
library(readr)
library(e1071)
library(caret)
library(DMwR2)
library(rpart)
library(randomForest)
library(performanceEstimation)
adult_dataset <- read.csv(file = "adult.data", header = F)
head(adult_dataset)
text <- read_lines("old.adult.names")
text <- text[64:78]
text[1:3]
nms <- str_split_fixed(text,":",2)[,1]
nms[1:3]
nms <- str_trim(nms)
nms[1:3]
nms <- str_replace_all(nms, "[^[:alnum:]]", "")
nms[1:3]
colnames(adult_dataset) <- c(nms)
head(adult_dataset)
str(adult_dataset)
sapply(adult_dataset, function(x) n_distinct(x))
sum(is.na(adult_dataset))
adult_dataset[sapply(adult_dataset, is.character)] <- lapply(adult_dataset[sapply(adult_dataset, is.character)], stringr::str_trim)
unique(adult_dataset$nativecountry)
unique(adult_dataset$occupation)
unique(adult_dataset$workclass)
adult_dataset[adult_dataset == "?"] <- NA
unique(adult_dataset$workclass)
sum(is.na(adult_dataset))
table(adult_dataset['class'])
boxplot.stats(adult_dataset$age)$out
adult_dataset <- adult_dataset %>% filter(age <= 79)
adult_dataset <- subset(adult_dataset, select = -fnlwgt)
dim(adult_dataset)
adult_dataset[sapply(adult_dataset, is.character)] <- lapply(adult_dataset[sapply(adult_dataset, is.character)], as.factor)
str(adult_dataset)
levels(adult_dataset$nativecountry)
adult_dataset$nativecountry <- as.character(adult_dataset$nativecountry)
adult_dataset$nativecountry <- ifelse(adult_dataset$nativecountry == "United-States","United-States", "other_countres")
adult_dataset$nativecountry <- as.factor(adult_dataset$nativecountry)
levels(adult_dataset$nativecountry)
sample_dataset <- adult_dataset
dim(sample_dataset)
set.seed(123)
belowtarget <- sample_dataset %>% filter(class == "<=50K")
abovetarget <- sample_dataset %>% filter(class == ">50K")
#create a sample data set with 10% of each data set
belowtargetsample <- sample(1:nrow(belowtarget), 0.1*nrow(belowtarget))
abovetargetsample <- sample(1:nrow(abovetarget), 0.1*nrow(abovetarget))
sample1 <- belowtarget[belowtargetsample,]
sample2 <- abovetarget[abovetargetsample,]
data_sample <- rbind(sample1, sample2)
head(data_sample)
table(data_sample$class)
ggplot(data = data_sample, mapping = aes(x = class)) + geom_bar()
res2 <- performanceEstimation(
PredTask(class ~., data_sample),
c(workflowVariants("standardWF",
pre = "knnImp",
learner = "randomForest",
# test all combinations of the given values for ntree and mtry
learner.pars = list(ntree = 500, mtry = 4:7),
# keep 'pre' parameters fixed for all variants
as.is = "pre"),
workflowVariants("standardWF",
pre = "knnImp",
learner="rpart",
learner.pars=list(cp = 0, minsplit=1:4), predictor.pars=list(type="class"),
as.is = "pre"),
workflowVariants("standardWF",
pre = "knnImp",
learner="svm",
learner.pars=list(cost =0.5:2, gamma = c(0.5,1)),
as.is = "pre")),
EstimationTask(metrics = c("err", "prec", "rec", "F"),
# need to provide positive class so classificationMetrics()
# which is the default evaluator can calculate prec, rec, and F
evaluator.pars = list(posClass = "<=50K"),
method = CV(nReps = 2, nFolds = 5, strat = TRUE)))
plot(res2)
topPerformers(res2, maxs = c(F, rep(T, 3)))
winWF2 <- getWorkflow("svm.v2", res2)
winWF2
winWF3 <- getWorkflow("randomForest.v1", res2)
winWF3
winWF4 <- getWorkflow("rpart.v3", res2)
winWF4
summary(res2$data_sample.class$randomForest.v1)
pres2 <- pairedComparisons(res2, maxs = c(F, rep(T, 3)), baseline = "randomForest.v1")
pres2$F$WilcoxonSignedRank.test
p <- pres2
signifDiffs(p, p.limit=0.01)$F$WilcoxonSignedRank.test
summary(data_sample)
data_sample <- knnImp(data_sample)
summary(data_sample)
library(randomForest)
tree_model <- randomForest(class ~ ., data = data_sample, ntree=500, mtry = 4, importance = TRUE,proximity = TRUE)
tree_model
plot(tree_model)
importance(tree_model)
varImpPlot(tree_model)
